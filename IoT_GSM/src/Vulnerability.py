"""
CREST Project 9: Automated security assessment for interconnected systems
Created by Mengmeng Ge
Modified by Moyang Feng
05/02/2020
This module contains vulnerability class and relevant functions.
"""

from Network import *
from SecurityMetrics import *
import ast

class vulNode(object):
    """
    Create vulnerability node object.
    """
    def __init__(self, name):
        # general info
        self.name = name
        self.publishedDate = ''
        self.lastModifiedDate = ''
        self.vendor_list = []
        self.product_list = []
        self.type = ''
        self.description = ''

        # CVSS metrics
        self.mv2 = metrics_v2()
        #self.mv3 = None

        # properties
        self.privilege = 1
        self.connections = []
    
    def __str__(self):
        return self.name
    
    def readCVSS(self, data):
        self.name = data['ID']
        self.publishedDate = data['publishedDate']
        self.lastModifiedDate = data['lastModifiedDate']
        self.vendor_list = ast.literal_eval(data['Vendor'])
        self.product_list = ast.literal_eval(data['Product'])
        self.type = data['Type']
        self.description = data['Description']
        self.mv2.readCVSS(data)
        #self.mv3 = metrics_v3(data)

        # determine the privilege with CVSS V2 metrics
        if self.mv2.obtainOtherPrivilege:
            self.privilege = 1
        elif self.mv2.obtainUserPrivilege:
            self.privilege = 2
        elif self.mv2.obtainAllPrivilege:
            self.privilege = 3
        
    def printInfo(self):
        if self.description == '':
            print('Vulnerability Node : ', self.name)
            return
        
        print('\n===== %s =====' %self.name)
        print('Published Date: ', self.publishedDate)
        print('Last Modified Date: ', self.lastModifiedDate)
        print('Vendor:', self.vendor_list)
        print('Product: ', self.product_list)
        print('Type: ', self.type)
        print('Description: ', self.description)
        self.mv2.printInfo()
        #self.mv3.printInfo()

    def createVuls(self, node):
        """
        Create vulnerability network for the node.
        :param node: node in the network which has vulnerabilities
        :param metricValue: assign a metric value to vulnerability (e.g. attack probability)
        :param pri: assign privilege value to vulnerability (1: none; 2: user; 3: admin)
        :returns: none
        """
        
        #Create a vulnerability network for the node
        if node.vul is None:
            node.vul = network()
            
        #Add current vulnerability into the vulnerability network
        node.vul.nodes.append(self)
        
        return None
    
    def thresholdPri(self, node, t):
        """
        Set start point for the vulnerability network and link vulnerabilities to the start point.
        
        :param node: node in the network which has vulnerabilities
        :param t: privilege value for the start point
        :returns None
        """
        
        node.vul.start = vulNode('start')
        start = node.vul.start
        del start.connections[:]

        # loop through vulnerability nodes
        for v in node.vul.nodes:
            if v.privilege <= t:
                start.connections.append(v)
        
        return None
    
    def terminalPri(self, node, t):
        """
        Set end point for the vulnerability network and link vulnerabilities to the end point.
        
        :param node: node in the network which has vulnerabilities
        :param t: privilege value for the end point
        :returns None
        """
        
        node.vul.end = vulNode('end')
        end = node.vul.end
        del end.connections[:]

        # loop through vulnerability nodes
        for v in node.vul.nodes:
            if v.privilege >= t:
                v.connections.append(end)
        
        return None